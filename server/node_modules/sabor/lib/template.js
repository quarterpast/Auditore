(function(){
  var Q, vm, fs, util, Coco, Template;
  Q = require('qq');
  vm = require('vm');
  fs = require('fs');
  util = require('util');
  Coco = require('coco');
  exports.Template = Template = (function(){
    Template.displayName = 'Template';
    var prototype = Template.prototype, constructor = Template;
    function _ctor(){} _ctor.prototype = prototype;
    function Template(filename){
      var _this = new _ctor;
      _this.filename = filename;
      _this.promise = Q.ncall(fs.readFile, fs, filename).then(function(data){
        return Coco.compile('Array::toString = ->@join ""\n"""' + data + '"""', {
          bare: true
        });
      }).then(function(script){
        return vm.createScript(script);
      });
      return _this;
    }
    prototype.render = function(ctx){
      var extra, next, _this = this;
      ctx == null && (ctx = {});
      extra = {};
      next = [];
      ctx.set = function(o){
        __import(extra, o);
        return "";
      };
      ctx.get = function(k, d){
        d == null && (d = "");
        return ctx[k] || extra[k] || d;
      };
      ctx.push = function(o){
        var k, v;
        for (k in o) {
          v = o[k];
          (extra[k] || (extra[k] = [])).concat(v);
        }
        return "";
      };
      ctx.extend = function(filename){
        next.push(function(comp){
          return Template(filename).render((extra.layout = comp, extra));
        });
        return "";
      };
      ctx.include = function(filename, also){
        var id;
        also == null && (also = ctx);
        id = '#{' + filename + JSON.stringify(also) + (new Date).getTime() + '}';
        next.push(function(comp){
          return Template(filename).render(also).then(function(inner){
            return comp.then(function(it){
              return it.replace(id, inner);
            });
          });
        });
        return id;
      };
      return this.promise.then(function(script){
        return script.runInNewContext(ctx);
      }).then(function(final){
        return next.reduce(function(last, fn){
          return last.then(fn);
        }, Q.when(final));
      });
    };
    return Template;
  }());
  if (require.main === module) {
    Template("../Exams/app/base.eco").render().then(console.log);
  }
  function __import(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
