Q = require \qq
vm = require \vm
fs = require \fs
util = require \util
Coco = require \coco

class exports.Template
	(@filename)~>
		@promise = Q.ncall fs.readFile, fs, filename
		.then (data)->
			Coco.compile 'Array::toString = ->@join ""\n"""'+data+'"""',{+bare}
		.then (script)->
			vm.createScript script
	render: (ctx = {})->
		extra = {}
		next = []
		ctx <<<
			set: (o)->extra <<< o; return ""
			get: (k,d="")->return ctx[k] or extra[k] or d
			push: (o)->extra@@[k].concat v for k,v in o; return ""
			extend: (filename)~>
				next.push (comp)->
					Template filename .render extra <<< layout:comp
				return ""
			include: (filename,also=ctx)~>
				id = '#{'+filename+(JSON.stringify also)+(new Date).getTime!+'}'
				next.push (comp)->
					Template filename .render also .then (inner)->
						comp.then ->it.replace id, inner
				return id

		@promise.then (script)->script.runInNewContext ctx
		.then (final)->
			next.reduce (last,fn)->
				last.then fn
			,Q.when final

if require.main is module
	Template "../Exams/app/base.eco" .render!.then console.log