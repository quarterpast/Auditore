Stream = require \stream

class exports.WavOutput extends Stream
	function u32 i then return [i&0xFF, (i>>8)&0xFF, (i>>16)&0xFF, (i>>24)&0xFF]

	function u16 i then return [i&0xFF, (i>>8)&0xFF]

	CHUNK_SIZE = 800

	readable: true
	(@length=30,@rate=44100,@channels=2,@bytes=2)->
		@samples = @length*@rate
		@runningBuf = new Buffer @bytes*@channels*CHUNK_SIZE
		@pad = @bytes*@channels*@samples % 2
		@byteLength = 4+(8+16)+(8+@bytes*@channels*@samples+@pad)

		@amplitude = Math.pow 2,@bytes*8
		@head = new Buffer [].concat do
			0x52,0x49,0x46,0x46
			u32 4+(8+16)+(8+@bytes*@channels*@samples+@pad)
			0x57,0x41,0x56,0x45
			######
			0x66,0x6d,0x74,0x20
			u32 16
			u16 1
			u16 @channels
			u32 @rate
			u32 @rate*@bytes*@channels
			u16 @bytes*@channels
			u16 8*Math.ceil @bytes
			######
			0x64,0x61,0x74,0x61
			u32 @bytes*@channels*@samples
		process.nextTick ~> @emit \data, @head
		process.nextTick @~tick
	headless: true
	readable: true
	paused: false
	cursor: 0
	off:0
	pause: ->@paused = true

	resume: ->
		@paused = false
		process.nextTick @~tick

	tick: ->
		@generate @cursor++, ~>
			if @off >= @bytes*@channels*CHUNK_SIZE
				@emit \data, @runningBuf
				@runningBuf = new Buffer @bytes*@channels*CHUNK_SIZE
				@off = 0
			@runningBuf."writeUInt#{@bytes*8}LE" it,@off
			@off += @bytes
			@emit \end if @cursor is @samples*@channels
			process.nextTick @~tick unless @paused

	generate: (i,out)->
		out Math.floor Math.random! * @amplitude