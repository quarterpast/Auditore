Stream = require \stream

class exports.WavOutput extends Stream
	function u32 i then
		[i&0xFF, (i>>8)&0xFF, (i>>16)&0xFF, (i>>24)&0xFF]
	function u16 i then
		[i&0xFF, (i>>8)&0xFF]

	readable: true
	writable: true

	(@length=120,@rate=44100,@channels=2,@bytes=2)->
		@on \pipe, (src)~>
			@head = new Buffer [].concat do
				0x52,0x49,0x46,0x46 # RIFF
				u32 src.byteLength
				0x57,0x41,0x56,0x45 # WAVE
				######
				0x66,0x6d,0x74,0x20 # fmt 
				u32 16
				u16 1
				u16 src.channels
				u32 src.rate
				u32 src.rate*src.bytes*src.channels
				u16 src.bytes*src.channels
				u16 8*Math.ceil src.bytes
				######
				0x64,0x61,0x74,0x61 # data
				u32 src.bytes*src.channels*src.samples
			@emit \data, @head

	end: (chunk)->
		write ... if chunk?
		@emit \end

	write: (chunk,enc)->
		if enc? and chunk instanceof String
			chunk = new Buffer chunk,enc
		@emit \data, chunk
		return true
